.container {
  & {
    @if map_get($grid, xs-container-width-type) == 'fixed' {
      width: map_get($grid, xs-container-width);
    } @else if map_get($grid, xs-container-width-type) == 'max' {
      max-width: map_get($grid, xs-container-width);
    }
  }
  &._pad {
    padding-right: $gutter;
    padding-left: $gutter;
  }
}

.col {
  flex: 1 1 100%;
  max-width: 100%;
  margin-right: 0;
}

@each $number in $grid-columns {
  $n: index($grid-columns, $number);
  $column: $grid-width/$grid-total * $n;
  $compensation: $gutter * ($n/$grid-total);
  $reduced-column: ($column * (1 - ($gutter / $column))) + $compensation;
  $offset: $column + $compensation + $gutter;

  .col-xs-#{$n} {
    flex: 0 0 $reduced-column;
    max-width: $reduced-column;
  }
  .row._start,
  .row._end,
  .row._center{
    .col-xs-#{$n} {
      flex: 0 0 $column - $gutter;
      max-width: $column - $gutter;
    }
  }
  .row._start{
    .col-xs-#{$n} {
      margin-right: $gutter;
    }
  }
  .row._end{
    .col-xs-#{$n} {
      margin-left:$gutter;
    }
  }
  .row._center{
    .col-xs-#{$n}:not(:first-of-type) {
      margin-left:$gutter/2;
    }
  }

  .col-xs-offset-#{$n} {
    margin-left: $offset;
  }

  .col.col-xs-offset-#{$n} {
    margin-left: $column + $compensation;
  }

  .row._ungap{
    >.col-xs-#{$n} {
      flex: 0 0 $column;
      max-width: $column;
      margin-left: 0;
      margin-right: 0;
    }
    >.col-xs-offset-#{$n} {
      margin-left: $column;
    }
  }
}

.row {
  @include flex-distribution("",-xs);
}

@include flex-order(-xs);

._reverse-xs, ._reverse-xs {
  flex-direction: column-reverse;
}