.form {
  ol {
    li[class*='col']:last-child:not(.col-last-#{$scr}),
    li[class*='col'].col-last-#{$scr},
    li[class*='col']._ungap{
      padding-right: 0;
    }
  }
}

.col {
  &:last-child:not(.col-last-#{$scr}),
  &.col-last-#{$scr},
  &._ungap{
    margin-right: 0;
  }
}

@each $number in $grid-columns {
  $n: index($grid-columns, $number);
  $column: $grid-width/$grid-total * $n;
  $compensation: $gutter * ($n/$grid-total);
  $reduced-column: ($column * (1 - ($gutter / $column))) + $compensation;
  $offset: $column + $compensation + $gutter;

  .col-#{$scr}-#{$n} {
    flex: 0 0 $reduced-column;
    max-width: $reduced-column;
  }
  .row._start,
  .row._end,
  .row._center{
    .col-#{$scr}-#{$n} {
      flex: 0 0 $column - $gutter;
      max-width: $column - $gutter;
    }
  }
  .row._start{
    .col-#{$scr}-#{$n} {
      margin-right: $gutter;
    }
  }
  .row._end{
    .col-#{$scr}-#{$n} {
      margin-left:$gutter;
    }
  }
  .row._center{
    .col-#{$scr}-#{$n}:not(:first-of-type) {
      margin-left:$gutter;
    }
  }
  .col-#{$scr}-offset-#{$n} {
    margin-left: $offset;
  }

  .col.col-#{$scr}-offset-#{$n} {
    margin-left: $column + $compensation;
  }

  .row._ungap, .form .row{
    >.col-#{$scr}-#{$n} {
      flex: 0 0 $column;
      max-width: $column;
      margin-left: 0;
      margin-right: 0;
    }
    >.col-#{$scr}-offset-#{$n} {
      margin-left: $column;
    }
  }

}

.row {
  @include flex-distribution("",-#{$scr});
}

@include flex-order(-#{$scr});