/* Uncomment and set these variables to customize the grid. */

.container {
  & {
    max-width: map_get($grid, container-width);
    overflow: hidden;
    margin: 0 auto;
  }
  &._center {
    margin-right: auto;
    margin-left: auto;
  }

  &._pad {
    padding-right: map_get($grid, gutters);
    padding-left: map_get($grid, gutters);
  }
}

.row {
  & {
    box-sizing: border-box;
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    padding: 0;

    /* ToDo remove this configuration for now, column compensation needs to tackled separately for each case
    @if map_get($grid, distribution) == 'between' {
    //11 gutters
      justify-content: space-between;
    }
    @else if map_get($grid, distribution) == 'around'{
  //13 gutters
      justify-content: space-around;
    }
    @else if map_get($grid, distribution) == 'center'{
      justify-content: center;
    }
    @else if map_get($grid, distribution) == 'start'{
      justify-content: flex-start;
    }
    @else if map_get($grid, distribution) == 'end'{
      justify-content: flex-end;
    }*/
  }

  @include flex-distribution();

  &._ungap {
    & > .col {
      margin-right: 0;
    }
  }
  ol {
    padding-left: 0;
    padding-right: 0;
  }
}
.col, [class^="col-"]{
  box-sizing: border-box;
  overflow: hidden;
  padding: 0;
}

$grid-columns: 1 2 3 4 5 6 7 8 9 10 11 12;
$grid-total: last($grid-columns);
$gutter: (map_get($grid-default, gutters)) * 11 / 12;

.col {
  flex:1 1 0;
  max-width: 100%;
  margin-right: $gutter;
  &:last-child:not(.col-last),
  &.col-last,
  &._ungap{
    margin-right: 0;
  }
}

@each $number in $grid-columns {
  $n: index($grid-columns, $number);
  $column: 100%/$grid-total * $n;
  $compensation: $gutter * ($n/$grid-total);
  $reduced-column: ($column * (1 - ($gutter / $column))) + $compensation;
  $offset: $column + $compensation + $gutter;
  .col-#{$n} {
    flex: 0 0 $reduced-column;
    max-width: $reduced-column;
  }
  .row._start,
  .row._end,
  .row._center{
    .col-#{$n} {
      flex: 0 0 $column - $gutter;
      max-width: $column - $gutter;
    }
  }
  .row._start{
    .col-#{$n} {
      margin-right: $gutter;
    }
  }
  .row._end{
    .col-#{$n} {
      margin-left:$gutter;
    }
  }
  .row._center{
    .col-#{$n}:not(:first-of-type) {
      margin-left:$gutter;
    }
  }
  .col-offset-#{$n} {
    margin-left: $offset;
  }

  /*auto-columns don't need gutter in offsetting, only compensation*/
  .col.col-offset-#{$n} {
    margin-left: $column + $compensation;
  }

  /*no need to reduce columns' width when using _ungap in a row, use normal column width instead*/
  .row._ungap{
    >.col-#{$n} {
      flex: 0 0 $column;
      max-width: $column;
      margin-left: 0;
      margin-right: 0;
    }
    >.col-offset-#{$n} {
      margin-left: $column;
    }
  }
}

@include flex-order();

.col-reverse {
  flex-direction: column-reverse;
}